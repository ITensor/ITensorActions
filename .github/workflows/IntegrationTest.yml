name: "Reusable IntegrationTest Workflow"

on:
  workflow_call:
    inputs:
      julia-version:
        description: "Julia version"
        default: "1"
        required: false
        type: string
      repo:
        description: "Repository name, including the group/user, such as ITensor/ITensors.jl"
        required: true
        type: string
      localregistry:
        description: "Add local registries hosted on GitHub. Specified by providing the url (https/ssh) to the repositories as a newline (\n) seperated list. User is responsible for setting up the necessary SSH-Keys to access the repositories if necessary."
        default: ""
        required: false
        type: string

jobs:
  test:
    name: ${{ inputs.repo }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ inputs.julia-version }}
          arch: x64
      - uses: julia-actions/julia-buildpkg@latest
        with:
          localregistry: "${{ inputs.localregistry }}"
      - name: Clone Downstream
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          path: downstream
      - name: Load this and run the downstream tests
        shell: julia --color=yes --project=downstream {0}
        run: |
          using Pkg
          # If provided add local registries
          if !isempty("${{ inputs.localregistry }}")
            registry_urls = split("${{ inputs.localregistry }}", "\n") .|> string
            for registry_url in registry_urls
              isempty(registry_url) && continue
              Pkg.Registry.add(Pkg.RegistrySpec(; url=registry_url))
            end
          end
          try
            # force it to use this PR's version of the package
            Pkg.develop(PackageSpec(path="."))  # resolver may fail with main deps
            Pkg.update()
            Pkg.test(coverage=true)  # resolver may fail with test time deps
          catch err
            err isa Pkg.Resolve.ResolverError || rethrow()
            # If we can't resolve that means this is incompatible by SemVer and this is fine
            # It means we marked this as a breaking change, so we don't need to worry about
            # Mistakenly introducing a breaking change, as we have intentionally made one
            @info "Not compatible with this release. No problem." exception=err
            exit(0)  # Exit immediately, as a success
          end
