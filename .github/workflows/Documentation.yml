name: "Reusable Documentation Build and Deploy Workflow"

on:
  workflow_call:
    inputs:
      documenter-key:
        description: "The `DOCUMENTER_KEY` secret required for deploying the documentation built for authentication with the ssh deploy key"
        required: false
        type: string
      debug-documenter:
        description: "Run julia with JULIA_DEBUG set to 'Documenter'"
        default: false
        required: false
        type: boolean
      github-token:
        description: "The GitHub token required for authentication with the ssh deploy key"
        required: false
        type: string
      julia-version:
        description: "Julia version"
        default: "1"
        required: false
        type: string
      localregistry:
        type: string
        required: false
        description: 'Add local registries hosted on GitHub. Specified by providing the url (https/ssh) to the repositories as a newline (\n) seperated list. User is responsible for setting up the necessary SSH-Keys to access the repositories if necessary.'
        default: ''
      self-hosted:
        description: "Run the job needs on a self hosted machine"
        default: false
        required: false
        type: boolean
      os:
        description: "The machine configuration on which the job needs to be run"
        default: "ubuntu-latest"
        required: false
        type: string
      cache:
        description: "Use the julia-actions/cache action for caching"
        default: true
        required: false
        type: boolean
      coverage:
        description: "Collect and generate code coverage-related information"
        default: true
        required: false
        type: boolean
      coverage-directories:
        description: "Comma-separated list of directories where the julia-processcoverage action will look for coverage information (e.g. `src,examples`)"
        default: "src,ext"
        required: false
        type: string
      continue-on-error:
        description: "Prevent the workflow run from failing if/when the job fails"
        required: false
        type: boolean

jobs:
  tests:
    name: "Build and Deploy Documentation"
    continue-on-error: ${{ inputs.continue-on-error || inputs.julia-version == 'nightly' }}
    runs-on: "${{ inputs.self-hosted && 'self-hosted' || inputs.os }}"
    steps:
      - uses: actions/checkout@v4
      - name: "Setup Julia ${{ inputs.julia-version }}"
        uses: julia-actions/setup-julia@v2
        with:
          version: "${{ inputs.julia-version }}"

      - uses: julia-actions/cache@v2
        if: "${{ inputs.cache }}"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Setup project
        shell: julia --project=docs --color=yes {0}
        run: |
          import Pkg
          Pkg.develop(Pkg.PackageSpec(path=pwd()))
          if VERSION >= v"1.8-"
            Pkg.Registry.add()
          else
            Pkg.Registry.add("General")
          end
          if !isempty("${{ inputs.localregistry }}")
            local_repos = split("${{ inputs.localregistry }}", "\n") .|> string
            for repo_url in local_repos
              isempty(repo_url) && continue
              Pkg.Registry.add(Pkg.RegistrySpec(; url=repo_url))
            end
          end
          retry(Pkg.build)(verbose=true)
      - name: "Build and Deploy Documentation"
        env:
          GITHUB_TOKEN: ${{ inputs.github-token || secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ inputs.documenter-key || secrets.DOCUMENTER_KEY }}
        run: ${{ inputs.debug-documenter && 'JULIA_DEBUG="Documenter"' || '' }} julia --project=docs/ ${{ inputs.coverage && '--code-coverage=user' }} docs/make.jl

      - uses: julia-actions/julia-processcoverage@v1
        if: "${{ inputs.coverage }}"
        with:
          directories: "${{ inputs.coverage-directories }}"

      - name: "Report Coverage with Codecov"
        uses: codecov/codecov-action@v5
        if: "${{ inputs.coverage }}"
        with:
          files: lcov.info
          flags: "docs"
          token: "${{ secrets.CODECOV_TOKEN }}"
          fail_ci_if_error: true
