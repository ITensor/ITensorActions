name: "Reusable Readme Generation Workflow"

on:
  workflow_call:
    inputs:
      julia-version:
        description: "Julia version"
        default: "1"
        required: false
        type: string
      localregistry:
        type: string
        required: false
        description: "Add local registries hosted on GitHub. Specified by providing the url (https/ssh) to the repositories as a newline (\n) seperated list. User is responsible for setting up the necessary SSH-Keys to access the repositories if necessary."
        default: ""
    outputs:
      up_to_date:
        description: "If the README.md is up-to-date or not."
        value: "${{ jobs.literate.outputs.up_to_date }}"
      literate-diff-patch:
        description: "A patch consisting of changes which can be applied to comply with literate check. Available only if `outputs.up_to_date` is `false`"
        value: "${{ jobs.literate.outputs.literate_changes }}"

concurrency:
  group: "${{ github.run_id || github.ref  }}:${{ github.workflow }}"
  cancel-in-progress: true

jobs:
  literate:
    name: "Literate Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: "${{ inputs.julia-version }}"
      - name: Setup project
        shell: julia --project=docs --color=yes {0}
        run: |
          import Pkg
          Pkg.develop(Pkg.PackageSpec(path=pwd()))
          if VERSION >= v"1.8-"
            Pkg.Registry.add()
          else
            Pkg.Registry.add("General")
          end
          if !isempty("${{ inputs.localregistry }}")
            local_repos = split("${{ inputs.localregistry }}", "\n") .|> string
            for repo_url in local_repos
              isempty(repo_url) && continue
              Pkg.Registry.add(Pkg.RegistrySpec(; url=repo_url))
            end
          end
          retry(Pkg.build)(verbose=true)
      - name: "Build README"
        run: julia --project=docs/ docs/make_readme.jl
      - name: Check if docs need to be updated
        id: check-literate
        run: |
          MODIFIED_FILES="$(git diff --name-only)"

          if [ -z "$MODIFIED_FILES" ]; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
          else
            echo "The documentation is outdated, rerun Literate to regenerate them."
            echo "$MODIFIED_FILES"

            {
              echo "literate_changes<<EOF"
              echo "$(git diff)"
              echo EOF
            } >> $GITHUB_OUTPUT

            exit 1
          fi
