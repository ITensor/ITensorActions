name: "Reusable CompatHelper Workflow"

on:
  workflow_call:
    inputs:
      julia-version:
        description: "Julia version"
        default: "1"
        required: false
        type: string
      local-registry-urls:
        description: 'URLs of registries besides General to use. Specified by providing the url (https/ssh) to the Github
                      repositories as a newline (\n) seperated list. Should correspond to the registry names listed in
                      `local-registry-names`.'
        default: ""
        required: false
        type: string
      local-registry-names:
        description: 'Names of registries besides General to use. Specified by providing the name of the registries
                      as a newline (\n) seperated list. Should correspond to the registry URLs listed in `local-registry-urls`.'
        default: ""
        required: false
        type: string

jobs:
  CompatHelper:
    runs-on: ubuntu-latest
    steps:
      - name: Check if Julia is already available in the PATH
        id: julia_in_path
        run: which julia
        continue-on-error: true
      - name: Install Julia, but only if it is not already available in the PATH
        uses: julia-actions/setup-julia@v2
        with:
          version: "${{ inputs.julia-version }}"
          arch: ${{ runner.arch }}
        if: steps.julia_in_path.outcome != 'success'
      - name: "Add the General registry via Git"
        run: |
          import Pkg
          ENV["JULIA_PKG_SERVER"] = ""
          Pkg.Registry.add("General")
        shell: julia --color=yes {0}
      - name: "Install CompatHelper"
        run: |
          import Pkg
          name = "CompatHelper"
          uuid = "aa819f21-2bde-4658-8897-bab36330d9b7"
          version = "3"
          Pkg.add(; name, uuid, version)
        shell: julia --color=yes {0}
      - name: "Run CompatHelper"
        run: |
          import CompatHelper
          import Pkg
          registries = [
            Pkg.RegistrySpec(;
              name = "General",
              url = "https://github.com/JuliaRegistries/General.git",
            )
          ]
          if !isempty("${{ inputs.local-registry-urls }}")
            registry_urls = split("${{ inputs.local-registry-urls }}", "\n") .|> string
            registry_names = if !isempty("${{ inputs.local-registry-names }}")
              split("${{ inputs.local-registry-names }}", "\n") .|> string
            else
              # Guess the registry name from the last part of the repository URL.
              map(registry_url -> first(split(last(split(registry_url, '/')), '.')), registry_urls)
            end
            for (registry_url, registry_name) in zip(registry_urls, registry_names)
              isempty(registry_url) && continue
              push!(registries, Pkg.RegistrySpec(; url=registry_url, name=registry_name))
            end
          end
          CompatHelper.main(; registries, bump_version=true)
        shell: julia --color=yes {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # This repo uses Documenter, so we can reuse our [Documenter SSH key](https://documenter.juliadocs.org/stable/man/hosting/walkthrough/).
          # If we didn't have one of those setup, we could configure a dedicated ssh deploy key `COMPATHELPER_PRIV` following https://juliaregistries.github.io/CompatHelper.jl/dev/#Creating-SSH-Key.
          # Either way, we need an SSH key if we want the PRs that CompatHelper creates to be able to trigger CI workflows themselves.
          # That is because GITHUB_TOKEN's can't trigger other workflows (see https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow).
          # Check if you have a deploy key setup using these docs: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/reviewing-your-deploy-keys.
          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}
          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}
