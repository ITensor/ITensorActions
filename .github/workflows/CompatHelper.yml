name: "Reusable CompatHelper Workflow"

on:
  workflow_call:
    inputs:
      julia-version:
        description: "Julia version"
        default: "1"
        required: false
        type: string
      localregistry:
        description: 'URLs of registries besides General to use. Specified by providing the url (https/ssh) to the Github
                      repositories as a newline (\n) seperated list.'
        default: ""
        required: false
        type: string

jobs:
  CompatHelper:
    runs-on: ubuntu-latest
    steps:
      - name: Check if Julia is already available in the PATH
        id: julia_in_path
        run: which julia
        continue-on-error: true
      - name: Install Julia, but only if it is not already available in the PATH
        uses: julia-actions/setup-julia@v2
        with:
          version: "${{ inputs.julia-version }}"
          arch: ${{ runner.arch }}
        if: steps.julia_in_path.outcome != 'success'
      - name: "Add the General registry via Git"
        run: |
          import Pkg
          ENV["JULIA_PKG_SERVER"] = ""
          Pkg.Registry.add("General")
        shell: julia --color=yes {0}
      - name: "Install CompatHelper"
        run: |
          import Pkg
          name = "CompatHelper"
          uuid = "aa819f21-2bde-4658-8897-bab36330d9b7"
          version = "3"
          Pkg.add(; name, uuid, version)
        shell: julia --color=yes {0}
      - name: "Run CompatHelper"
        run: |
          import CompatHelper
          import LibGit2
          import Pkg
          import TOML
          function registry_info_from_url(url::AbstractString)
            return mktempdir() do tmp_path
              # Retry to help spurious connection issues, particularly on CI.
              # See https://github.com/JuliaLang/Pkg.jl/blob/v1.11.0/src/Registry/Registry.jl#L246-L248.
              repo = retry(LibGit2.clone; delays=fill(1.0, 5), check=(s, e) -> e isa LibGit2.GitError)(url, tmp_path)
              LibGit2.close(repo)
              return TOML.parsefile(joinpath(tmp_path, "Registry.toml"))
            end
          end
          registry_name_from_url(url::AbstractString) = registry_info_from_url(url)["name"]
          registries = [
            Pkg.RegistrySpec(;
              url = "https://github.com/JuliaRegistries/General.git",
              name = "General",
            )
          ]
          if !isempty("${{ inputs.localregistry }}")
            registry_urls = split("${{ inputs.localregistry }}", "\n") .|> string
            for registry_url in registry_urls
              isempty(registry_url) && continue
              registry_name = registry_name_from_url(registry_url)
              # `CompatHelper.main` requires both the URL and the name.
              # TODO: Raise an issue about that in CompatHelper.jl.
              push!(registries, Pkg.RegistrySpec(; url=registry_url, name=registry_name))
            end
          end
          subdirs = ["", "test", "docs"]
          CompatHelper.main(; registries, subdirs, bump_version=true)
        shell: julia --color=yes {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # This repo uses Documenter, so we can reuse our [Documenter SSH key](https://documenter.juliadocs.org/stable/man/hosting/walkthrough/).
          # If we didn't have one of those setup, we could configure a dedicated ssh deploy key `COMPATHELPER_PRIV` following https://juliaregistries.github.io/CompatHelper.jl/dev/#Creating-SSH-Key.
          # Either way, we need an SSH key if we want the PRs that CompatHelper creates to be able to trigger CI workflows themselves.
          # That is because GITHUB_TOKEN's can't trigger other workflows (see https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow).
          # Check if you have a deploy key setup using these docs: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/reviewing-your-deploy-keys.
          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}
          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}
